# -*- coding: utf-8 -*-
"""feature_engineerering2script.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AuyfyzegVBdHXjfdSqjnU6CC8lbLWplu
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import holidays
import argparse

def load_datasets(train_path, test_path):
  '''
  The function loads train and test datasets.
  '''
  df_train = pd.read_csv(train_path)
  df_test = pd.read_csv(test_path)

  return df_train, df_test

def mark_peak_hours(df):
  '''
  The function marks peak hours based on energy price.
  '''
  #set threshold
  q=0.80
  threshold = df['price_energy[EUR/MWh]'].quantile(q)

  #mark peak hour: 1-> the highest prices
  df['is_peak'] = (df['price_energy[EUR/MWh]'] > threshold).astype(int)

  return df

def encode_cyclical(df):
  '''
  The function encode cyclical features - hours.
  '''
  df["hour_sin"] = np.sin(2 * np.pi * df["hour"] / 24)
  df["hour_cos"] = np.cos(2 * np.pi * df["hour"] / 24)
  return df

def mark_date_features(df):
  '''
  The function marks date hours, days, monyhs, years,
  day of week and places it in new columns.
  '''
  df['hour'] = df['DateCET/CEST'].dt.hour
  df['day'] = df['DateCET/CEST'].dt.day
  df['month'] = df['DateCET/CEST'].dt.month
  df['year'] = df['DateCET/CEST'].dt.year
  df['day_of_week'] = df['DateCET/CEST'].dt.dayofweek

  return df

def set_timezone(df):
  '''
  The function sets timezone to CET/CEST.
  '''
  #set datetime type column
  df['DateCET/CEST'] = pd.to_datetime(df['DateCET/CEST'], utc=True)

  #set timezone
  df['DateCET/CEST'] = df['DateCET/CEST'].dt.tz_convert('Europe/Warsaw')

  return df

def mark_holidays(df, year):
  '''
  The function marks holidays and weekends.
  '''

  #marking holidays
  pl_holidays = holidays.Poland(years=year)
  holiday_flag = df['DateCET/CEST'].dt.date.isin(pl_holidays).astype(int)

  #marking weekends
  weekend_flag = df['DateCET/CEST'].dt.weekday >= 5

  df['is_holiday'] = ((holiday_flag) | (weekend_flag)).astype(int)

  return df

def main(args):

  df_train, df_test = load_datasets(args.train_path, args.test_path)

  df_train = set_timezone(df_train)
  df_test = set_timezone(df_test)
  print("Seting timezone is completed.")

  df_train = mark_date_features(df_train)
  df_test = mark_date_features(df_test)
  print("Marking data features is completed.")

  df_train = mark_peak_hours(df_train)
  df_test = mark_peak_hours(df_test)
  print("Marking peak hours is completed.")

  df_train = encode_cyclical(df_train)
  df_test = encode_cyclical(df_test)
  print("Encoding cyclical features is completed.")

  df_train = mark_holidays(df_train, year=2023)
  df_test = mark_holidays(df_test, year=2024)
  ("Marking holidays is completed.")

  df_train.to_csv(args.output_tr_path, index=False)
  df_test.to_csv(args.output_te_path, index=False)


if __name__ == '__main__':

  parser = argparse.ArgumentParser(description='Energy Price Forecasting')

  parser.add_argument("-tr", "--train_path", type=str, help="Path to the train dataset")
  parser.add_argument("-te", "--test_path", type=str, help="Path to the test dataset")
  parser.add_argument("-out_tr", "--output_tr_path", type=str, help="Output path to saving train datasets.")
  parser.add_argument("-out_te", "--output_te_path", type=str, help="Output path to saving test datasets.")

  args = parser.parse_args()

  main(args)